datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Track         Track[]
  TrackOwners   TrackOwner[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id              Int          @id @default(autoincrement())
  fileName        String
  title           String
  composer        String
  uploadedAt      DateTime     @default(now())
  uploadedBy      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  previewStart    Int?
  previewEnd      Int?
  price           Float?
  formattedPrice  String?
  downloadName    String?
  downloadCount   Int?
  key             String?
  instrumentation String?
  additionalInfo  String?
  TrackOwner      TrackOwner[]
  Comments        Comment[]
}

model TrackOwner {
  id          Int      @id @default(autoincrement())
  track       Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId     Int
  purchasedBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  purchasedAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   Int
  postedBy  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  createdAt DateTime @default(now())
}
